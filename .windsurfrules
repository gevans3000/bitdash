### ðŸ”„ Project Awareness & Context
**ALWAYS CHECK CONSOLE AND ANYWHERE ELSE FOR WEB APP ERRORS TO HELP WITH DEBUGGING**
- **Always read [PLANNING.md]** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check [TASKS.md]** before starting a new task. If the task isn't listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in [PLANNING.md]

### ðŸ§± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### ðŸ§ª Testing & Reliability
- **Always create unit tests for new features** (functions, components, API endpoints, etc).
- **After updating any logic**, check whether existing tests need to be updated. If so, do it.
- **Tests should live in a `/__tests__` folder** mirroring the component structure for frontend tests.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### âœ… Task Completion
- **Mark completed tasks in [TASKS.md]** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to [TASKS.md]under a "Discovered During Work" section. AFTER MARKING A TASK AS COMPLETED, CREATE A GITHUB MESSAGE for me to commit

### ðŸ“Ž Style & Conventions
- **Use TypeScript/JavaScript** as the primary language for the React frontend.
- **Follow React best practices** and use functional components with hooks.
- **Use Tailwind CSS** for styling components.
- **Use React Query** for server state management.
- **Write clear component documentation** using JSDoc:
  ```typescript
  /**
   * Brief description of the component.
   * 
   * @param {Object} props - Component props
   * @param {string} props.bitcoinPrice - Current Bitcoin price
   * @param {Function} props.onPriceUpdate - Callback when price updates
   * @returns {JSX.Element} Rendered component
   */
  const BitcoinPrice: React.FC<BitcoinPriceProps> = ({ bitcoinPrice, onPriceUpdate }) => {
    // Component implementation
  }